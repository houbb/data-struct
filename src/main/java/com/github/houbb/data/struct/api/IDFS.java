package com.github.houbb.data.struct.api;

import java.util.List;

/**
 * @author binbin.hou
 * @since 0.0.2
 */
public interface IDFS<V> {

    /**
     * 深度遍历
     *
     * 深度优先搜索在搜索过程中访问某个顶点后，需要递归地访问此顶点的所有未访问过的相邻顶点。
     * 初始条件下所有节点为白色，选择一个作为起始顶点，按照如下步骤遍历：
     *
     * a. 选择起始顶点涂成灰色，表示还未访问
     *
     * b. 从该顶点的邻接顶点中选择一个，继续这个过程（即再寻找邻接结点的邻接结点），一直深入下去，直到一个顶点没有邻接结点了，涂黑它，表示访问过了
     *
     * c. 回溯到这个涂黑顶点的上一层顶点，再找这个上一层顶点的其余邻接结点，继续如上操作，如果所有邻接结点往下都访问过了，就把自己涂黑，再回溯到更上一层。
     *
     * d. 上一层继续做如上操作，知道所有顶点都访问过。
     *
     * ps: 这里直接使用压栈来实现。
     *
     * @param root 根节点
     * @return 遍历
     * @since 0.0.2
     */
    List<V> dfs(final V root);

}
